<?php

namespace common\models\recipe;

use common\models\recipe\give\iRecipeGive;
use common\models\recipe\need\iRecipeNeed;
use Yii;

/**
 * This is the model class for table "recipe_item".
 *
 * @property integer $id
 * @property integer $recipe_id
 * @property string $item_type
 * @property string $operation_type
 * @property integer $updated_at
 * @property integer $created_at
 *
 *
 * @property RecipeItemInfo[] $itemInfo
 */
class RecipeItem extends \common\models\BaseModel
{
    const OPERATION_NEED = 'need';
    const OPERATION_GIVE = 'give';

    /** @var iRecipeGive|iRecipeNeed */
    public $info;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'recipe_item';
    }

    public static function instantiate($row)
    {
        return self::getInstance($row['operation_type']);
    }

    /**
     * @param $item_type
     * @return RecipeItemNeed|RecipeItemGive
     * @throws \Exception
     */
    public static function getInstance($item_type)
    {
        switch ($item_type) {
            case self::OPERATION_NEED:
                return new RecipeItemNeed();
                break;
            case self::OPERATION_GIVE:
                return new RecipeItemGive();
                break;
        }

        throw new \Exception('Вид списка не найден', 420);
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['recipe_id', 'operation_type'], 'required'],
            [['recipe_id', 'updated_at', 'created_at'], 'integer'],
            [['item_type', 'operation_type'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'recipe_id' => 'Recipe ID',
            'item_type' => 'Item Type',
            'operation_type' => 'Operation Type',
            'updated_at' => 'Updated At',
            'created_at' => 'Created At',
        ];
    }

    /**
     * @inheritdoc
     * @return \common\models\query\RecipeItemQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\RecipeItemQuery(get_called_class());
    }

    public function getItemInfo()
    {
        return $this->hasMany(RecipeItemInfo::className(), ['item_id' => 'id']);
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        switch ($this->operation_type) {
            case self::OPERATION_NEED:
                $this->info = BaseRecipeNeed::getNeedObject($this->item_type);
                foreach ($this->itemInfo as $Info) {
                    $this->info->{$Info->field} = $Info->value;
                }

                break;
            case self::OPERATION_GIVE:
                $this->info = BaseRecipeGive::getGiveObject($this->item_type);
                foreach ($this->itemInfo as $Info) {
                    $this->info->{$Info->field} = $Info->value;
                }

                break;
        }
    }
}
