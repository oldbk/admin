<?php

namespace common\models\oldbk;

use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "static_message".
 *
 * @property integer $id
 * @property string $message
 * @property integer $is_send
 * @property integer $must_send
 * @property string $message_type
 * @property integer $updated_at
 * @property integer $created_at
 * @property integer $day_interval
 * @property integer $is_fixed
 */
class StaticMessage extends \common\models\BaseModel
{
    const MESSAGE_LOTO = 'loto';

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'static_message';
    }

    public function init()
    {
        if($this->scenario != self::SCENARIO_SEARCH) {
            $this->day_interval = 1;
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('db_oldbk');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['message', 'message_type'], 'required'],
            [['must_send', 'day_interval'], 'required', 'when' => function($model){
                return !$model->is_fixed;
            }],
            ['must_send', 'prepareDate'],
            [['message'], 'string'],
            [['is_send', 'updated_at', 'created_at', 'day_interval', 'is_fixed'], 'integer'],
            [['message_type'], 'string', 'max' => 255],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'message' => 'Сообщение',
            'is_send' => 'Is Send',
            'must_send' => 'Время отправки',
            'message_type' => 'Тип сообщения',
            'day_interval' => 'Интервал',
            'updated_at' => 'Updated At',
            'created_at' => 'Created At',
            'is_fixed' => 'Фиксированное',
        ];
    }

    /**
     * @inheritdoc
     * @return \common\models\oldbk\query\StaticMessageQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\oldbk\query\StaticMessageQuery(get_called_class());
    }

    public static function getTypeList()
    {
        return [
            self::MESSAGE_LOTO => 'Лото'
        ];
    }

    public function prepareDate()
    {
        if(!is_string($this->must_send) || empty($this->must_send)) {
            $this->addError('must_send', 'Некорретное время');
            return false;
        }

        $arr = explode(' ', $this->must_send);
        $date = explode('/', $arr[0]);
        $time = explode(':', $arr[1]);

        $datetime = new \DateTime();
        $datetime->setDate($date[2], $date[1], $date[0])
            ->setTime($time[0], $time[1]);

        $this->must_send = $datetime->getTimestamp();
        return true;
    }
}
