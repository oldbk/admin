<?php

namespace common\models\loto;

use common\helper\CurrencyHelper;
use common\models\itemInfo\BaseInfo;
use common\models\itemInfo\iItemInfo;
use common\models\itemInfo\ItemInfo;
use Yii;
use yii\base\Model;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "loto_item".
 *
 * @property integer $id
 * @property integer $pocket_id
 * @property string $item_name
 * @property string $category_id
 * @property float $cost
 * @property float $cost_sum
 * @property integer $cost_type
 * @property integer $stock
 * @property integer $updated_at
 * @property integer $created_at
 * @property string $item_info_name
 * @property int $count
 * @property int $item_count
 *
 * @property LotoPocket $pocket
 * @property LotoItemInfo[] $lotoItemInfos
 */
class LotoItem extends \common\models\BaseModel
{
    const STOCK_NO  = 0;
    const STOCK_YES = 1;

    /** @var iItemInfo|Model|ItemInfo */
    public $info;

    public function init()
    {
        if($this->scenario != self::SCENARIO_SEARCH) {
            $this->cost_type = CurrencyHelper::CURRENCY_EKR;
            $this->cost = 0;
            $this->count = 0;
            $this->item_count = 1;
        }

        parent::init(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
        $p = parent::beforeSave($insert); // TODO: Change the autogenerated stub
        $this->cost = str_replace(',', '.', $this->cost);
        $this->cost_sum = $this->cost * $this->count * $this->item_count;


        return $p;
    }

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'loto_item';
    }

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['pocket_id', 'item_name', 'cost', 'cost_type', 'item_info_name', 'category_id'], 'required'],
            [['pocket_id', 'cost_type', 'stock', 'updated_at', 'created_at', 'count', 'category_id', 'item_count'], 'integer'],
            [['item_name', 'item_info_name'], 'string', 'max' => 255],
            [['pocket_id'], 'exist', 'skipOnError' => true, 'targetClass' => LotoPocket::className(), 'targetAttribute' => ['pocket_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'item_name' => 'Тип',
            'cost' => 'Цена',
            'cost_type' => 'Cost Type',
            'stock' => 'Запас',
            'updated_at' => 'Дата обновления',
            'created_at' => 'Дата добавления',
            'item_info_name' => 'Название предмета',
            'count' => 'Кол-во в пуле',
            'item_count' => 'Кол-во в лоте',
            'category_id' => 'Категория',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLotoItemInfos()
    {
        return $this->hasMany(LotoItemInfo::className(), ['item_id' => 'id']);
    }

    /**
     * @inheritdoc
     * @return \common\models\query\LotoItemQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new \common\models\query\LotoItemQuery(get_called_class());
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        $this->info = BaseInfo::getItemInfo($this->item_name);
        foreach ($this->lotoItemInfos as $Info) {
            if(property_exists($this->info, $Info->field)) {
                $this->info->{$Info->field} = $Info->value;
            }
        }
    }

    public static function getStockList()
    {
        return [
            self::STOCK_YES => 'Да',
            self::STOCK_NO  => 'Нет',
        ];
    }

    public static function getItemTypeList()
    {
        return [
            BaseInfo::ITEM_TYPE_ITEM,
            BaseInfo::ITEM_TYPE_ABILITY_OWN,
        ];
    }
}
